// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String   // hashed password
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  spkRecords    SPKRecord[]
  refreshTokens RefreshToken[]

  @@map("users")
}

// Refresh tokens for JWT authentication
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// SPK Record model - main record for each SPK analysis
model SPKRecord {
  id        String   @id @default(uuid())
  userId    String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  criteria     Criterion[]
  alternatives Alternative[]
  sawResults   SAWResult[]
  wpResults    WPResult[]

  @@map("spk_records")
}

// Criterion model - criteria for evaluation
model Criterion {
  id      String @id @default(uuid())
  spkId   String
  name    String
  weight  Float
  type    String // 'benefit' or 'cost'

  // Relations
  spkRecord        SPKRecord          @relation(fields: [spkId], references: [id], onDelete: Cascade)
  alternativeValues AlternativeValue[]

  @@map("criteria")
}

// Alternative model - alternatives to be evaluated
model Alternative {
  id    String @id @default(uuid())
  spkId String
  name  String

  // Relations
  spkRecord         SPKRecord          @relation(fields: [spkId], references: [id], onDelete: Cascade)
  alternativeValues AlternativeValue[]
  sawResults        SAWResult[]
  wpResults         WPResult[]

  @@map("alternatives")
}

// Alternative values for each criterion
model AlternativeValue {
  id            String @id @default(uuid())
  alternativeId String
  criterionId   String
  value         Float

  // Relations
  alternative Alternative @relation(fields: [alternativeId], references: [id], onDelete: Cascade)
  criterion   Criterion   @relation(fields: [criterionId], references: [id], onDelete: Cascade)

  @@unique([alternativeId, criterionId])
  @@map("alternative_values")
}

// SAW (Simple Additive Weighting) Results
model SAWResult {
  id            String @id @default(uuid())
  spkId         String
  alternativeId String
  score         Float
  rank          Int

  // Relations
  spkRecord   SPKRecord   @relation(fields: [spkId], references: [id], onDelete: Cascade)
  alternative Alternative @relation(fields: [alternativeId], references: [id], onDelete: Cascade)

  @@unique([spkId, alternativeId])
  @@map("saw_results")
}

// WP (Weighted Product) Results
model WPResult {
  id            String @id @default(uuid())
  spkId         String
  alternativeId String
  score         Float
  rank          Int

  // Relations
  spkRecord   SPKRecord   @relation(fields: [spkId], references: [id], onDelete: Cascade)
  alternative Alternative @relation(fields: [alternativeId], references: [id], onDelete: Cascade)

  @@unique([spkId, alternativeId])
  @@map("wp_results")
}